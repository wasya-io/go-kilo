// Code generated by MockGen. DO NOT EDIT.
// Source: app/boundary/filemanager/filemanager.go

// Package filemanager is a generated GoMock package.
package filemanager

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// GetFilename mocks base method.
func (m *MockFileManager) GetFilename() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilename")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFilename indicates an expected call of GetFilename.
func (mr *MockFileManagerMockRecorder) GetFilename() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilename", reflect.TypeOf((*MockFileManager)(nil).GetFilename))
}

// HandleSaveRequest mocks base method.
func (m *MockFileManager) HandleSaveRequest() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSaveRequest")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSaveRequest indicates an expected call of HandleSaveRequest.
func (mr *MockFileManagerMockRecorder) HandleSaveRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSaveRequest", reflect.TypeOf((*MockFileManager)(nil).HandleSaveRequest))
}

// OpenFile mocks base method.
func (m *MockFileManager) OpenFile(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileManagerMockRecorder) OpenFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileManager)(nil).OpenFile), filename)
}

// SaveCurrentFile mocks base method.
func (m *MockFileManager) SaveCurrentFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCurrentFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCurrentFile indicates an expected call of SaveCurrentFile.
func (mr *MockFileManagerMockRecorder) SaveCurrentFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCurrentFile", reflect.TypeOf((*MockFileManager)(nil).SaveCurrentFile))
}

// SaveFile mocks base method.
func (m *MockFileManager) SaveFile(filename string, content []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", filename, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileManagerMockRecorder) SaveFile(filename, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileManager)(nil).SaveFile), filename, content)
}
